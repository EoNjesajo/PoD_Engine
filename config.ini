; config.ini
[SKELETON]
DEFAULT = {'html': 
            {'head': 
                {'title':[f'{System_Editor._path}'], 
                'style':['body { margin: 0; }', 'canvas { width: 100%%; height: 100%% }']},
            'body':
                System_Editor._source
            }
        }


[SCENE]
SCENE_DECLARE = "var scene = new THREE.Scene();\n"
RANDERER_DECLARE = "var renderer = new THREE.WebGLRenderer( { antialias: true, preserveDrawingBuffer: true } );\n"
RANDERER_SETSIZE = f"renderer.setSize( {Scene_Component._width}, {Scene_Component._height} );\n"					
ADD_IN_DOCUMENT = "document.body.appendChild( renderer.domElement );\n"
WORLD_DECLARE = "const world = new CANNON.World();\n"
SET_GRAVITY = "world.gravity.set(0, -9.82, 0);\n"

[CAMERA]
CAMERA_DECLARE = f"var camera = new THREE.PerspectiveCamera( {Camera_Component._angle}, {Camera_Component._width}/{Camera_Component._height}, {Camera_Component._short}, {Camera_Component._long} );\n"
SET_CAMERA_LOCATION = f"camera.position.set ( {Camera_Component._x}, {Camera_Component._y}, {Camera_Component._z} );\n"
SET_CONTROLS =f"var controls = new THREE.OrbitControls (camera, renderer.domElement);\n"
UPDATA_CONTROLS = "controls.update();\n"

[ANIMATION]
ANIMATE_DECLARE = f"""var animate = function () {{
	setTimeout(
		function() {{
			requestAnimationFrame(animate); 
		}}, 
	1000 / {Animation_Component._framesPerSecond});

	renderer.render( scene, camera ); }};"""
USE_ANIMATE = "animate();"

[LIGHT]
LIGHT_DECLARE = f"var light_base = new THREE.AmbientLight( {Light_Component._color} );\n" 
ADD_LIGHT = "scene.add( light_base );"

[CUBE]
CUBE_DECLAR = f"var {Cube_Component._name} = new THREE.Mesh( new THREE.BoxGeometry( {Cube_Component._w}, {Cube_Component._h}, {Cube_Component._d} ), new THREE.MeshStandardMaterial({{ color: {Cube_Component._color}}}));\n"
ADD_CUBE = f"scene.add( {Cube_Component._name} );"

; // 태양 조명
; var light_sun = new THREE.DirectionalLight ( 0x808080, 5.0 );
; 	var shadowBlur=10;
; 	light_sun.castShadow=true;
; 	light_sun.shadow.camera.left=-shadowBlur;
; 	light_sun.shadow.camera.right=shadowBlur;
; 	light_sun.shadow.camera.top=shadowBlur;
; 	light_sun.shadow.camera.bottom=-shadowBlur;
; 	scene.add( light_sun );